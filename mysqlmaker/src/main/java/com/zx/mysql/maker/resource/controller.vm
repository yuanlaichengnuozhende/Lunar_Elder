package $controllerPackage;

import com.carbonstop.common.core.code.ApiCode;
import com.carbonstop.common.core.domain.ApiResult;
import com.carbonstop.common.core.domain.IPage;
import com.carbonstop.common.core.exception.ServiceException;
import com.carbonstop.common.core.request.IdReq;
import com.carbonstop.common.core.request.PageParam;
import com.carbonstop.common.core.utils.NumUtil;
import com.carbonstop.common.mybatis.model.Order;
import com.carbonstop.common.redis.lock.LockUtil;
import com.carbonstop.common.security.utils.SecurityUtils;
import $entityClassName;
import $serviceClassName;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import javax.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.redisson.api.RedissonClient;
import org.springframework.beans.BeanUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RequiredArgsConstructor
@Slf4j
@RestController
@Validated
@Api(tags = "AUTO_$controllerName")
@RequestMapping("/$entityVariable")
public class $controllerName {

    private final RedissonClient redissonClient;
    private final $serviceName $serviceVariable;

    @ApiOperation("列表-分页")
    @ApiImplicitParams({
//        @ApiImplicitParam(name = "name", value = "value", required = false, dataType = "string", paramType = "query"),
    })
//    @ControllerMeta({ControllerMetaType.UPDATE_BY})
//    @RequiresPermissions({"/perms"})
    @GetMapping("/page")
    public ApiResult<IPage<$entityName>> page(@Validated PageParam pageParam) {
        #set($pageExp = $serviceVariable + ".findPage(null, pageParam, Order.createTimeDesc());")
        IPage<$entityName> page = $pageExp

        return ApiResult.ok(page);
    }

    @ApiOperation("详情")
    @ApiImplicitParams({
        @ApiImplicitParam(name = "id", value = "id", required = true, dataType = "int", paramType = "query"),
    })
//    @RequiresPermissions({"/perms"})
    @GetMapping("/{id}")
    public ApiResult<$entityName> detail(@PathVariable Long id) {
        #set($detailExp = $serviceVariable + ".selectByPrimaryKey(id);")
        $entityName entity = $detailExp
        return ApiResult.ok(entity);
    }

    @ApiOperation("新增")
//    @Log(moduleType = ModuleType.USER, operType = OperType.OTHER)
//    @RequiresPermissions({"/perms"})
    @PostMapping("/add")
    public ApiResult add(@RequestBody @Valid $entityName req) {
        String label = "$entityVariable:add:" + SecurityUtils.getUserId();
        ApiResult apiResult = LockUtil.lock(redissonClient, label, () -> {
            #set($insertExp = $serviceVariable + ".insertSelective(req);")
            $entityName entity = $insertExp

            String logContent = "";
            return ApiResult.log(entity.getId(), logContent);
        });
        return apiResult;
    }

    @ApiOperation("编辑")
//    @Log(moduleType = ModuleType.USER, operType = OperType.OTHER)
//    @RequiresPermissions({"/perms"})
    @PostMapping("/edit")
    public ApiResult edit(@RequestBody @Valid $entityName req) {
        if (NumUtil.isNullOrZero(req.getId())) {
            return ApiResult.error(ApiCode.REQUEST_PARAM_ERROR);
        }

        String label = "$entityVariable:edit:" + SecurityUtils.getUserId();
        ApiResult apiResult = LockUtil.lock(redissonClient, label, () -> {
            #set($detailExp = $serviceVariable + ".selectByPrimaryKey(req.getId());")
            $entityName entity = $detailExp
            if (entity == null) {
                throw new ServiceException(ApiCode.REQUEST_PARAM_ERROR);
            }

            BeanUtils.copyProperties(req, entity);

            #set($updateExp = $serviceVariable + ".updateSelective(entity);")
            $updateExp

            String logContent = "";
            return ApiResult.log(entity.getId(), logContent);
        });
        return apiResult;
    }

    @ApiOperation("删除")
//    @Log(moduleType = ModuleType.USER, operType = OperType.OTHER)
//    @RequiresPermissions({"/perms"})
    @PostMapping("/delete")
    public ApiResult delete(@RequestBody @Valid IdReq req) {
        #set($detailExp = $serviceVariable + ".selectByPrimaryKey(req.getId());")
        $entityName entity = $detailExp
        if (entity == null) {
            throw new ServiceException(ApiCode.REQUEST_PARAM_ERROR);
        }
        if (entity.getDeleted()) {
            return ApiResult.ok();
        }

        entity.setDeleted(true);
        #set($updateExp = $serviceVariable + ".updateSelective(entity);")
        $updateExp

        String logContent = "";
        return ApiResult.log(entity.getId(), logContent);
    }

}